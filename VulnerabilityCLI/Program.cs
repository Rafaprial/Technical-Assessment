using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        if (args.Length < 6 || args[0] != "--file" || args[2] != "--url" || args[4] != "--api-key")
        {
            Console.WriteLine("Usage: vulnerability-cli --file {JSON_FILE} --url {API_URL} --api-key {API_KEY}");
            return;
        }

        string filePath = args[1];
        string apiUrl = args[3];
        string apiKey = args[5];

        if (!File.Exists(filePath))
        {
            Console.WriteLine("Error: JSON file not found.");
            return;
        }

        try
        {
            string jsonContent = await File.ReadAllTextAsync(filePath);

            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            var vulnerabilitiesData = JsonSerializer.Deserialize<VulnerabilityData>(jsonContent, options);
            if (vulnerabilitiesData?.Vulnerabilities == null || vulnerabilitiesData.Vulnerabilities.Count == 0)
            {
                Console.WriteLine("Error: Invalid or empty JSON format.");
                return;
            }

            using HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("x-api-key", apiKey);

            // Serialize all vulnerabilities as a single JSON array
            string vulnerabilityJson = JsonSerializer.Serialize(vulnerabilitiesData.Vulnerabilities);
            var content = new StringContent(vulnerabilityJson, Encoding.UTF8, "application/json");

            // Send Post Method
            HttpResponseMessage response = await client.PostAsync(apiUrl, content);
            // Read the response body as text
            string responseContent = await response.Content.ReadAsStringAsync();

            // Handle response
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Error uploading vulnerabilities: {response.StatusCode}");
                Console.WriteLine($"Response Headers: {response.Headers}");
                Console.WriteLine($"Response Content: {await response.Content.ReadAsStringAsync()}");
                Console.WriteLine($"Sent JSON: {vulnerabilityJson}");
            }
            else
            {
                Console.WriteLine($"Successfully uploaded vulnerability/ies.");
                Console.WriteLine($"{responseContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading JSON file: {ex.Message}");
        }
    }
}

// Classes for JSON deserialization
public class VulnerabilityData
{
    [JsonPropertyName("vulnerabilities")]
    public List<Vulnerability> Vulnerabilities { get; set; }
}

public class Vulnerability
{
    [JsonPropertyName("title")]
    public string Title { get; set; }

    [JsonPropertyName("description")]
    public string Description { get; set; }

    [JsonPropertyName("cve")]
    public string Cve { get; set; }

    [JsonPropertyName("criticality")]
    public int Criticality { get; set; }
}